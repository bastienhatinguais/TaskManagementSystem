@using TaskManagementSystem.Shared.DTOs
@using TaskManagementSystem.Shared.DTOs.ToDoTask
@inject HttpClient Http


@if (tasks is null)
{
    <div class="space-y-3">
        <div class="h-10 w-full animate-pulse rounded-md bg-slate-200/70"></div>
        <div class="h-10 w-full animate-pulse rounded-md bg-slate-200/70"></div>
        <div class="h-10 w-3/4 animate-pulse rounded-md bg-slate-200/70"></div>
    </div>
}
else if (tasks.Count == 0)
{
    <div class="text-center text-slate-500">
        No tasks yet. <NavLink href="/task/new" class="underline">Create one</NavLink>.
    </div>
}
else
{
    <div class="flex flex-col gap-4 rounded p-3">
        @foreach (var task in tasks)
        {
            <ToDoTaskItem ToDoTask="@task" OnDelete="HandleDelete" OnEdit="HandleEdit"/>
        }
    </div>
}


@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    private List<ToDoTaskDto>? tasks;

    protected override async Task OnInitializedAsync()
    {
        tasks = await Http.GetFromJsonAsync<List<ToDoTaskDto>>("api/task");
    }

    private void HandleEdit(ToDoTaskDto task)
    {
        Navigation.NavigateTo($"/task/{task.Id}/edit");
    }

    private async Task HandleDelete(ToDoTaskDto task)
    {
        var response = await Http.DeleteAsync($"api/task/{task.Id}");
        if (response.IsSuccessStatusCode)
        {
            tasks?.Remove(task);
        }
    }
}
