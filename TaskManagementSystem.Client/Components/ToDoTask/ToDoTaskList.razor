@using Microsoft.AspNetCore.SignalR.Client
@using TaskManagementSystem.Shared.DTOs
@using TaskManagementSystem.Shared.DTOs.ToDoTask
@inject HttpClient Http
@inject ITaskService TaskService

@if (tasks is null)
{
    <div class="space-y-3">
        <div class="h-10 w-full animate-pulse rounded-md bg-slate-200/70"></div>
        <div class="h-10 w-full animate-pulse rounded-md bg-slate-200/70"></div>
        <div class="h-10 w-3/4 animate-pulse rounded-md bg-slate-200/70"></div>
    </div>
}
else if (tasks.Count == 0)
{
    <div class="text-center text-slate-500">
        No tasks yet. <NavLink href="/task/new" class="underline">Create one</NavLink>.
    </div>
}
else
{
    <div class="flex flex-col gap-4 rounded p-3">
        @foreach (var task in tasks)
        {
            <ToDoTaskItem @key="task.Id" ToDoTask="@task" OnDelete="HandleDelete" OnEdit="HandleEdit" />
        }
    </div>
}


@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    private List<ToDoTaskDto>? tasks;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.ListAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7069/hubs/task")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<ToDoTaskDto>("TaskCreated", OnTaskCreated);
        hubConnection.On<ToDoTaskDto>("TaskUpdated", OnTaskUpdated);
        hubConnection.On<Guid>("TaskDeleted", OnTaskDeleted);

        await hubConnection.StartAsync();
    }

    private void HandleEdit(ToDoTaskDto task)
    {
        Navigation.NavigateTo($"/task/{task.Id}/edit");
    }

    private async Task HandleDelete(ToDoTaskDto task)
    {
        var response = await TaskService.DeleteAsync(task.Id);
        if (response.IsSuccessStatusCode)
        {
            tasks?.Remove(task);
        }
    }

    private async Task OnTaskCreated(ToDoTaskDto task)
    {
        if (tasks != null && !tasks.Any(t => t.Id == task.Id))
        {
            tasks.Add(task);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnTaskUpdated(ToDoTaskDto task)
    {
        if (tasks == null) return;
        var index = tasks.FindIndex(t => t.Id == task.Id);
        if (index >= 0)
        {
            tasks[index] = task;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnTaskDeleted(Guid taskId)
    {
        if (tasks == null) return;
        var task = tasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            tasks.RemoveAll(t => t.Id == taskId);
            await InvokeAsync(StateHasChanged);
        }
    }
}
